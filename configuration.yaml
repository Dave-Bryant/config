

# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

recorder:
  db_url: !secret mariadb_password
  exclude:
    entity_globs:
      - sensor.wupws_weather* # old sensors
      - sensor.pws_forecast_narrative* # just words
      - binary_sensor.ewelink*  # motion sensors
    # entities:
    #   - weather.dark_sky

frontend:
  themes: !include_dir_merge_named themes

lovelace:
  mode: yaml

logger:
  default: info
  logs:
    custom_components.samsungtv_tizen: error
    custom_components.smart_irrigation: info
    homeassistant.components.media_player: error
    homeassistant.components.pychromecast: error

auto_backup:
  auto_purge: true

discovery:
  ignore:
    - apple_tv
    - homekit
    - harmony

samsungtv:
  - host: 10.0.0.130
    name: Samsung Smart TV
    turn_on_action:
      - service: wake_on_lan.send_magic_packet
        data:
          mac: "D0:D0:03:A2:D9:8E"
wake_on_lan:

zha:
  zigpy_config:
    network:
      channel: 26             # What channel the radio should try to use.
      channels: [26, 24, 25]  # Channel mask

# camera:                  Now supported through Configuration interface
#   - platform: foscam
#     ip: 10.0.0.117
#     rtsp_port: 88
#     name: Front Camera
#     username: !secret front_cam_user
#     password: !secret front_cam_pw
#   - platform: foscam
#     ip: 10.0.0.121
#     rtsp_port: 88
#     name: Back Camera
#     username: !secret back_cam_user
#     password: !secret back_cam_pw

ffmpeg:

# media_player:
  # - platform: yamaha_musiccast  MusicCast is now configured in UI
  #   host: 10.0.0.136
  # - platform: samsungtv_tizen
  #   host: 10.0.0.130
  #   mac: "D0:D0:03:A2:D9:8E"
  #   name: Samsung Smart TV
  #   update_method: "smartthings"
  #   api_key: !secret smartthings_API_key
  #   device_id: !secret smartthings_device_id

google:
  client_id: !secret google_client_id
  client_secret: !secret google_client_secret

# ios:

# device_tracker:     # using iphone
#   platform: nmap_tracker
#   home_interval: 10
#   hosts:
#     - 10.0.0.20  #wens_iphone
#     - 10.0.0.70  #davids_iphone


# weather:
#   - platform: darksky
#     api_key: !secret dark_sky
#     mode: daily

tplink:
  discovery: false
  switch:
    - host: 10.0.0.1
    - host: 10.0.0.95
    - host: 10.0.0.96
climate:
  - platform: sensibo
    api_key: !secret sensibo

# Text to speech
tts:
  - platform: google_translate
    #cache: true
    #cache_dir: /config/tts
    #time_memory: 300
    #base_url: http://10.0.0.55:8123


# Tasmoto and MDI icons
panel_iframe:
  tasmoadmin:
    title: TasmoAdmin
    icon: mdi:lightbulb-on
    url: http://10.0.0.55:9541
  mdiindex:
    title: MDI Icon Index
    icon: mdi:vector-square
    url: https://cdn.rawgit.com/james-fry/home-assistant-mdi/efd95d7a/home-assistant-mdi.html

sensor:
  - platform: mqtt
    state_topic: 'monitor/ground_floor/davidbluetooth'
    value_template: '{{ value_json.confidence }}'
    unit_of_measurement: '%'
    name: 'ground_floor_david'
  - platform: mqtt
    state_topic: 'monitor/ground_floor/wendybluetooth'
    value_template: '{{ value_json.confidence }}'
    unit_of_measurement: '%'
    name: 'ground_floor_wendy'
  - platform: min_max
    name: "david_occupancy_confidence"
    type: max
    round_digits: 0
    entity_ids:
      - sensor.ground_floor_david
  - platform: min_max
    name: "wendy_occupancy_confidence"
    type: max
    round_digits: 0
    entity_ids:
      - sensor.ground_floor_wendy
  - platform: command_line
    name: CPU Temperature
    command: "cat /sys/class/thermal/thermal_zone0/temp"
    # If errors occur, make sure configuration file is encoded as UTF-8
    unit_of_measurement: "°C"
    value_template: '{{ value | multiply(0.001) | round(1) }}'
  - platform: systemmonitor
    resources:
      - type: memory_use_percent
      - type: processor_use
  - platform: statistics
    entity_id: sensor.outdoor_temperature
    name: "temp_high_low"
    max_age:
      minutes: 1440
    sampling_size: 1440
  - platform: template
    sensors:
      high_temperature_today:
        friendly_name: 'High Temperature Today'
        unit_of_measurement: °C
        icon_template: mdi:thermometer
        value_template: "{{ state_attr('sensor.temp_high_low', 'max_value') }}"
  - platform: template
    sensors:
      low_temperature_today:
        friendly_name: 'Low Temperature Today'
        unit_of_measurement: °C
        icon_template: mdi:thermometer
        value_template: "{{ state_attr('sensor.temp_high_low', 'min_value') }}"
  - platform: min_max   # for the REST Forecast
    name: "precip_chance_today"
    type: max
    entity_ids:
      - sensor.pws_forecast_today
      - sensor.pws_forecast_tonight
  - platform: min_max
    name: "precip_chance_tomorrow"
    type: max
    entity_ids:
      - sensor.pws_forecast_tomorrow
      - sensor.pws_forecast_tomorrow_tonight

  # irrigation
  - platform: template
    sensors:
      smart_irrigation_hourly_netto_precipitation:
        friendly_name: 'Smart Irrigation Netto Precipitation (updated hourly)'
        value_template: "{{state_attr('sensor.smart_irrigation_hourly_adjusted_run_time','netto_precipitation')|float}}"
        icon_template: "mdi:sprinkler-variant"
        unit_of_measurement: 'mm'
      smart_irrigation_bucket:
        friendly_name: 'Smart Irrigation Bucket'
        value_template: "{{state_attr('sensor.smart_irrigation_daily_adjusted_run_time','bucket')|float}}"
        icon_template: "mdi:sprinkler-variant"
        unit_of_measurement: 'mm'

 # A/C sensors
  - platform: template
    sensors:
      study_temp:
        friendly_name: 'Study temperature'
        unit_of_measurement: '°C'
        device_class: temperature
        value_template: "{{ state_attr('climate.study', 'current_temperature') }}"
      study_humidity:
        friendly_name: 'Study humidity'
        unit_of_measurement: '%'
        device_class: humidity
        value_template: "{{ state_attr('climate.study', 'current_humidity') }}"
      study_fan_modes:
        friendly_name: 'Study fan modes'
        value_template: "{{ state_attr('climate.study', 'fan_mode') }}"
      hollys_bedroom_temp:
        friendly_name: 'Hollys bedroom temperature'
        unit_of_measurement: '°C'
        device_class: temperature
        value_template: "{{ state_attr('climate.hollys_bedroom', 'current_temperature') }}"
      hollys_bedroom_humidity:
        friendly_name: 'Hollys bedroom humidity'
        unit_of_measurement: '%'
        device_class: humidity
        value_template: "{{ state_attr('climate.hollys_bedroom', 'current_humidity') }}"
      wendys_bedroom_temp:
        friendly_name: 'Wendys bedroom temperature'
        unit_of_measurement: '°C'
        device_class: temperature
        value_template: "{{ state_attr('climate.wendys_bedroom', 'current_temperature') }}"
      wendys_bedroom_humidity:
        friendly_name: 'Wendys bedroom humidity'
        unit_of_measurement: '%'
        device_class: humidity
        value_template: "{{ state_attr('climate.wendys_bedroom', 'current_humidity') }}"
      family_room_temp:
        friendly_name: 'Family room temperature'
        unit_of_measurement: '°C'
        device_class: temperature
        value_template: "{{ state_attr('climate.family_room', 'current_temperature') }}"
      family_room_humidity:
        friendly_name: 'Family_room humidity'
        unit_of_measurement: '%'
        device_class: humidity
        value_template: "{{ state_attr('climate.family_room', 'current_humidity') }}"



# WUNDERGROUND_REST
rest:
  - authentication: basic
    resource: !secret wunderground_url_forecast
    scan_interval: 300
    sensor:
      - name: "pws_forecast_narrative_today"
        json_attributes: "daypart"
        value_template: "{% if state_attr('sensor.pws_forecast_narrative_today','daypart') == None %} {{'Waiting'}}
                         {%- else -%} {{(state_attr('sensor.pws_forecast_narrative_today','daypart')[0].daypartName[0]) | default('Waiting', true)}}
                         {% endif %}
                         {% if state_attr('sensor.pws_forecast_narrative_today','daypart') == None %} {{'Waiting'}}
                         {%- else -%} {{(state_attr('sensor.pws_forecast_narrative_today','daypart')[0].narrative[0]) | default('Waiting', true)}}
                         {% endif %}"
      - name: "pws_forecast_narrative_tonight"
        json_attributes: "daypart"
        value_template: "{% if state_attr('sensor.pws_forecast_narrative_tonight','daypart') == None %} {{'Waiting'}}
                         {%- else -%} {{(state_attr('sensor.pws_forecast_narrative_tonight','daypart')[0].daypartName[1])}}
                         {% endif %}
                         {% if state_attr('sensor.pws_forecast_narrative_tonight','daypart') == None %} {{'Waiting'}}
                         {%- else -%} {{(state_attr('sensor.pws_forecast_narrative_tonight','daypart')[0].narrative[1])}}
                         {% endif %}"
      - name: "pws_forecast_narrative_tomorrow"
        json_attributes: "daypart"
        value_template: "{% if state_attr('sensor.pws_forecast_narrative_tomorrow','daypart') == None %} {{'Waiting'}}
                         {%- else -%} {{(state_attr('sensor.pws_forecast_narrative_tomorrow','daypart')[0].daypartName[2])}}
                         {% endif %}
                         {% if state_attr('sensor.pws_forecast_narrative_tomorrow','daypart') == None %} {{'Waiting'}}
                         {%- else -%} {{(state_attr('sensor.pws_forecast_narrative_tomorrow','daypart')[0].narrative[2])}}
                         {% endif %}"
      - name: "pws_forecast_narrative_tomorrow_tonight"
        json_attributes: "daypart"
        value_template: "{% if state_attr('sensor.pws_forecast_narrative_tomorrow_tonight','daypart') == None %} {{'Waiting'}}
                         {%- else -%} {{(state_attr('sensor.pws_forecast_narrative_tomorrow_tonight','daypart')[0].daypartName[3])}}
                         {% endif %}
                         {% if state_attr('sensor.pws_forecast_narrative_tomorrow_tonight','daypart') == None %} {{'Waiting'}}
                         {%- else -%} {{(state_attr('sensor.pws_forecast_narrative_tomorrow_tonight','daypart')[0].narrative[3])}}
                         {% endif %}"
      - name: "pws_forecast_today"
        json_attributes: "daypart"
        value_template: "{% if state_attr('sensor.pws_forecast_today','daypart') == None %} {{float('0')}}
                         {%- else -%} {{(state_attr('sensor.pws_forecast_today','daypart')[0].precipChance[0]) | default('0.0001', true)}}
                         {% endif %}"
      - name: "pws_forecast_tonight"
        json_attributes: "daypart"
        value_template: "{% if state_attr('sensor.pws_forecast_tonight','daypart') == None %} {{float('0')}}
                         {%- else -%} {{(state_attr('sensor.pws_forecast_tonight','daypart')[0].precipChance[1])}}
                         {% endif %}"
      - name: "pws_forecast_tomorrow"
        json_attributes: "daypart"
        value_template: "{% if state_attr('sensor.pws_forecast_tomorrow','daypart') == None %} {{float('0')}}
                         {%- else -%} {{(state_attr('sensor.pws_forecast_tomorrow','daypart')[0].precipChance[2])}}
                         {% endif %}"
      - name: "pws_forecast_tomorrow_tonight"
        json_attributes: "daypart"
        value_template: "{% if state_attr('sensor.pws_forecast_tomorrow_tonight','daypart') == None %} {{float('0')}}
                         {%- else -%} {{(state_attr('sensor.pws_forecast_tomorrow_tonight','daypart')[0].precipChance[3])}}
                         {% endif %}"


# sensor:   # this works but i use Ecowitt for this info
#   - platform: rest
#     name: pws_report
#     json_attributes:
#       - observations
#     value_template: '{{ value_json["observations"][0]["obsTimeLocal"].title() }}'
#     resource: !secret wunderground_url_current
#     scan_interval: 300
#
#   - platform: template
#     sensors:
#       pws_station_id:
#         value_template: '{{ states.sensor.pws_report.attributes.observations[0].stationID }}'
#         friendly_name: Station ID
#       pws_obs_local:
#         value_template: '{{ states.sensor.pws_report.attributes.observations[0].obsTimeLocal }}'
#         friendly_name: Time Local
#       pws_solar_radiation:
#         value_template: '{{ states.sensor.pws_report.attributes.observations[0].solarRadiation }}'
#         friendly_name: Solar Radiation
#         unit_of_measurement: "W/m2"
#       pws_wind_dir:
#         value_template: '{{ states.sensor.pws_report.attributes.observations[0].winddir }}'
#         friendly_name: Wind Direction
#         unit_of_measurement: "°"
#       pws_humidity:
#         value_template: '{{ states.sensor.pws_report.attributes.observations[0].humidity }}'
#         friendly_name: Humidity
#         unit_of_measurement: "rH%"
#       pws_temp:
#         value_template: '{{ states.sensor.pws_report.attributes.observations[0].metric.temp }}'
#         friendly_name: Temperature
#         unit_of_measurement: "°C"
#       pws_heat_index:
#         value_template: '{{ states.sensor.pws_report.attributes.observations[0].metric.heatIndex }}'
#         friendly_name: Heat Index
#         unit_of_measurement: "°C"
#       pws_dewpt:
#         value_template: '{{ states.sensor.pws_report.attributes.observations[0].metric.dewpt }}'
#         friendly_name: Dew Point
#         unit_of_measurement: "°C"
#       pws_windchill:
#         value_template: '{{ states.sensor.pws_report.attributes.observations[0].metric.windChill }}'
#         friendly_name: Wind Chill
#         unit_of_measurement: "°C"
#       pws_wind_speed:
#         value_template: '{{ states.sensor.pws_report.attributes.observations[0].metric.windSpeed }}'
#         friendly_name: Wind Speed
#         unit_of_measurement: "Km/h"
#       pws_wind_gust:
#         value_template: '{{ states.sensor.pws_report.attributes.observations[0].metric.windGust }}'
#         friendly_name:  Wind Gust
#         unit_of_measurement: "Km/h"
#       pws_pressure:
#         value_template: '{{ states.sensor.pws_report.attributes.observations[0].metric.pressure }}'
#         friendly_name: Pressure
#         unit_of_measurement: "hPa"
#       pws_precip_rate:
#         value_template: '{{ states.sensor.pws_report.attributes.observations[0].metric.precipRate }}'
#         friendly_name: Rain Rate
#         unit_of_measurement: "L/h"
#       pws_precip_total:
#         value_template: '{{ states.sensor.pws_report.attributes.observations[0].metric.precipTotal }}'
#         friendly_name: Rain Total
#         unit_of_measurement: "L"



input_number:
  garden_watering_time:
    name: "Garden Watering Time"
    min: 0
    max: 10000
    step: 10
    mode: box
    unit_of_measurement: sec
input_text:
  frlawnwest_run_time:
  frlawneast_run_time:
  bklawnsouth_run_time:
  bklawnnorth_run_time:
  frontgarden_run_time:
  backsidegarden_run_time:
  tinybacklawn_run_time:
  frlawnwest_run_date:
  frlawneast_run_date:
  bklawnsouth_run_date:
  bklawnnorth_run_date:
  frontgarden_run_date:
  backsidegarden_run_date:
  tinybacklawn_run_date:
  frlawnwest_run_duration:
  frlawneast_run_duration:
  bklawnsouth_run_duration:
  bklawnnorth_run_duration:
  frontgarden_run_duration:
  backsidegarden_run_duration:
  tinybacklawn_run_duration:

input_boolean:
  check_act_garbage:
    name: input_boolean.check_act_garbage
  force_irrigation:
    name: input_boolean.force_irrigation



binary_sensor:
  - platform: threshold
    entity_id: sensor.study_temp
    lower: 19.0
    upper: 22.0
    hysteresis: 0.0
    name: study_temp_thres_on
  - platform: threshold
    entity_id: sensor.study_temp
    lower: 20.0
    upper: 22.0
    hysteresis: 0.0
    name: study_temp_thres_off
  - platform: threshold
    entity_id: sensor.hollys_bedroom_temp
    lower: 19.0
    upper: 22.0
    hysteresis: 0.0
    name: hollys_bedroom_temp_thres_on
  - platform: threshold
    entity_id: sensor.hollys_bedroom_temp
    lower: 20.0
    upper: 22.0
    hysteresis: 0.0
    name: hollys_bedroom_temp_thres_off


group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
